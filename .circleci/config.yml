# To test:
# docker pull circleci/picard
# docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):$(pwd) -v ~/.circleci/:/root/.circleci --workdir $(pwd) circleci/picard circleci build

version: 2
jobs:
  build-2.7: &build_template
    working_directory: /hazma
    docker:
      - image: circleci/python:2.7
        user: root
    steps:
      - checkout
      - attach_workspace:
          at: /hazma
      - run:
          name: Setup SciKit-CI
          command: |
            pip install scikit-ci==0.13.0 scikit-ci-addons==0.11.0
            ci_addons --install ../addons
      - run:
          name: Install
          command: ci install
      - run:
          name: Test
          command: ci test
      - run:
          name: Build Distribution
          command: ci after_test
      - persist_to_workspace:
          root: .
          paths: dist

  build-3.4:
    <<: *build_template
    docker:
      - image: circleci/python:3.4
        user: root

  build-3.5:
    <<: *build_template
    docker:
      - image: circleci/python:3.5
        user: root

  build-3.6:
    <<: *build_template
    docker:
      - image: circleci/python:3.6
        user: root

  deploy:
    working_directory: /hazma
    docker:
      - image: circleci/python:3.6
        user: root
    steps:
      - run:
          name: Check Repo User
          command: if [[ $CIRCLE_PROJECT_USERNAME != "LoganAMorrison" ]]; then circleci step halt; fi
      - checkout
      - run:
          name: Setup SciKit-CI
          command: |
            pip install scikit-ci==0.13.0 scikit-ci-addons==0.11.0
            ci_addons --install ../addons
      - run:
          name: Install
          command: ci install
      - run:
          name: Install patchelf auditwheel, twine
          command: |
            apt-get install patchelf  # needed to run auditwheel
            python -m pip install auditwheel
            python -m pip install twine
      # only attach the workspace at this point to prevent the removal of source distributions
      - attach_workspace:
          at: /hazma
      - run:
          name: Create sdist
          command: python setup.py sdist
      - run:
          name: Fix Distribution Wheels
          command: |
            ls ./dist/*-linux_$(uname -m).whl  # This will prevent further deployment if no wheels are found
            # Since there are no external shared libraries to bundle into the wheels
            # this step will fixup the wheel switching from 'linux' to 'manylinux1' tag
            #for whl in $(ls ./dist/*-linux_$(uname -m).whl); do
            #    auditwheel repair $whl -w ./dist/
            #    rm $whl
            find dist/ -name "*.whl" -exec auditwheel repair {} \;
            rm dist/*
            done
      - run:
          name: Deploy source and linux wheels
          command: |
            twine upload ./dist/*.whl ./dist/*.tar.gz -u $PYPI_USER -p $PYPI_PASSWORD
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build-2.7: &build_job_template
          filters:
            tags:
              only:
                - /^v?[0-9]+(\.[0-9]+)*(rc[0-9]+)?/
      - build-3.4:
          <<: *build_job_template
      - build-3.5:
          <<: *build_job_template
      - build-3.6:
          <<: *build_job_template
      - deploy:
          requires:
            - build-2.7
            - build-3.4
            - build-3.5
            - build-3.6
          filters:
            tags:
              only:
                - /^v?[0-9]+(\.[0-9]+)*(rc[0-9]+)?/
