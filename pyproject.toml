[project]
name = "hazma"
version = "2.0.0"
readme = "README.md"
requires-python = ">=3.10"
authors = [
  { name = "Logan A. Morrison", email = "loanmorr@ucsc.edu" },
  { name = "Adam Coogan" },
]
maintainers = [{ name = "Logan A. Morrison", email = "loanmorr@ucsc.edu" }]
keywords = ["dark-matter", "mev-dark-matter", "gamma-ray-spectra"]
description = "Python package for computing indirect detection constraints on sub-GeV dark matter."
classifiers = ["Programming Language :: Python"]

[project.urls]
Repository = "https://github.com/LoganAMorrison/Hazma"
Documentation = "http://hazma.readthedocs.io"

[project.optional-dependencies]
dev = ["black~=23.3"]

[build-system]
build-backend = "setuptools.build_meta"
requires = ["numpy", "cython", "setuptools", "scipy"]

[tool.setuptools]
py-modules = ["_build"]
zip-safe = false
include-package-data = true

[tool.setuptools.cmdclass]
build_py = "_build.build_py"

[tool.setuptools.packages.find]
where = [".", "hazma"]

[tool.black]
target-version = ['py310']

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["hazma"]
line_length = 88

[tool.ruff]
target-version = "py310"
# Do not set required-version here.  Normally, its purpose would be to
# alert users that they were using an out of date version.
# However most users are using ruff through either pre-commit, which will always
# ensure that the correct version is being used, or through vscode, which will
# NOT alert the user, and will instead fail silently, if the version is
# not correct (see https://github.com/charliermarsh/ruff-vscode/issues/142).
# Continuing with out of date version is better than nothing.

select = [
  "F",      # pyflakes
  "D",      # pydocstyle
  "I",      # isort
  "NPY",    # numpy
  "PLE",    # pylint
  "PIE",    # flake8-pie
  "PT",     # flake8-pytest
  "RUF",    # ruff-native checks
  "UP",     # pyupgrade
  "YTT",    # flake8-2020
  "E",      # pycodestyle
  "EXE",    # flake8-executable
  "A",      # flake8-builtins
  "B",      # flake8-bugbear
  "W",      # pycodestyle
  "PGH",    # pygrep-hooks
  "PLC",    # pylint
  "PLR",    # pylint
  "PLW",    # pylint
  "BLE",    # flake8-blind-except
  "ANN",    # flake8-annotations
  "TCH",    # flake8-type-checking
  "TID251", # banned APIs.
]

ignore = [
  "E501",    # Line too long
  "D10",     # Missing docs (entire category)
  "D401",    # First line of docstring should be in imperative mood
  "D417",    # Missing argument description in the docstring
  "NPY002",  # numpy-legacy-random
  "PD002",   # `inplace=True` should be avoided; it has inconsistent behavior
  "PLR0402", # Use from {module} import {name} in lieu of alias
  "PT009",   # Use a regular `assert` instead of unittest-style `assertAlmostEqual`
  "TCH003",  # Move standard library import {} into a type-checking block
  "PT011",   # `pytest.raises(Exception)` is too broad, set the `match` parameter or use a more specific exception
  "PT012",   # `pytest.raises()` block should contain a single simple statement
  "PT013",   # Found incorrect import of pytest, use simple `import pytest` instead
  "PT018",   # Assertion should be broken down into multiple parts
  "RUF005",  # Consider `[x, *y]` instead of concatenation
  "RUF007",  # Prefer `itertools.pairwise()` over `zip()` when iterating over successive pairs
]

exclude = [".vscode", "site-packages"]

[tool.ruff.flake8-tidy-imports.banned-api."numpy.typing"]
msg = "use numpy directly"

[tool.ruff.pydocstyle]
convention = "google"

[tool.pydocstringformatter]
summary-quotes-same-line = true

[tool.pyright]
exclude = [".git/", ".github/", ".vscode/", "**/__pycache__"]

extraPaths = ["hazma"]
pythonPlatform = "Linux"
pythonVersion = "3.10"
useLibraryCodeForTypes = true
reportDuplicateImport = "warning"
reportUntypedNamedTuple = "information"
reportUnusedImport = "warning"
reportUnusedVariable = "information"
verboseOutput = true


[tool.pylint.main]
# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-allow-list = ["matplotlib", "numpy", "scipy"]

# Specify a score threshold to be exceeded before program exits with error.
fail-under = 10

# Files or directories to be skipped. They should be base names, not paths.
ignore = [".git"]

# List of module names for which member attributes should not be checked (useful
# for modules/projects where namespaces are manipulated during runtime and thus
# existing member attributes cannot be deduced by static analysis). It supports
# qualified module names, as well as Unix pattern matching.
ignored-modules = ["matplotlib.cm"]

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
# Increase recursion limit due to RecursionError when pylint/astroid parses
# newer pandas code (pandas 1.5).
init-hook = "import sys; sys.setrecursionlimit(8 * sys.getrecursionlimit())"

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs.
jobs = 1

# Control the amount of potential inferred values when inferring a single object.
# This can help the performance when dealing with large functions or complex,
# nested conditions.
limit-inference-results = 100

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins = [
  "pylint.extensions.check_elif",
  "pylint.extensions.docparams",
  "pylint.extensions.docstyle",
  "pylint.extensions.for_any_all",
  "pylint.extensions.typing",
]

# Pickle collected data for later comparisons.
persistent = true

# Minimum Python version to use for version dependent checks. Will default to the
# version used to run pylint.
py-version = "3.10"

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode = true

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension = true

[tool.pylint.basic]
# Naming style matching correct argument names.
argument-naming-style = "snake_case"

# Naming style matching correct attribute names.
attr-naming-style = "snake_case"

# Bad variable names which should always be refused, separated by a comma.
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]

# Naming style matching correct class attribute names.
class-attribute-naming-style = "any"

# Naming style matching correct class constant names.
class-const-naming-style = "UPPER_CASE"

# Naming style matching correct class names.
class-naming-style = "PascalCase"

# Naming style matching correct constant names.
const-naming-style = "UPPER_CASE"

# Minimum line length for functions/classes that require docstrings, shorter ones
# are exempt.
docstring-min-length = 4

# Naming style matching correct function names.
function-naming-style = "snake_case"

# Good variable names which should always be accepted, separated by a comma.
good-names = [
  "f",  # For file handles
  "g",  # For matplotlib figures
  "i",
  "j",
  "k",
  "ll",
  "m",
  "n",
  "p",
  "r",
  "x",
  "y",
  "z",
  "ab", # antibody
  "ax", # For matplotlib axes
  "bc", # barcode
  "cx", # center x
  "cy", # center y
  "dx", # delta in x
  "dy", # delta in y
  "dz", # delta in z
  "ex",
  "fn",
  "fp",
  "fs",
  # DO NOT ADD id to this list! id is a built-in function in python,
  # and should not be used as a variable name!
  "mc",                 # For MoleculeCounter
  "mu",
  "ok",
  "qv",                 # Quality value
  "h5",                 # For loading H5 files
  "df",                 # For pandas dataframes
  "Run",
  "getPipelineForTest",
  "buildArgsForTest",
  "buildArgsForRun",
  "B",
  "LL",
  "N",
  "X",
  "Y",
  "W",
  "_",
]

# Naming style matching correct inline iteration names.
inlinevar-naming-style = "any"

# Naming style matching correct method names.
method-naming-style = "snake_case"

# Naming style matching correct module names.
module-naming-style = "snake_case"

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties. These
# decorators are taken in consideration only for invalid-name.
property-classes = ["abc.abstractproperty"]

# Naming style matching correct variable names.
variable-naming-style = "snake_case"

[tool.pylint.classes]
# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = ["__init__", "__new__", "setUp"]

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = ["cls"]

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = ["mcs"]

[tool.pylint.design]
# Maximum number of arguments for function / method.
max-args = 8
# Maximum number of attributes for a class (see R0902).
max-attributes = 15
# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5
# Maximum number of branch for function / method body.
max-branches = 24
# Maximum number of locals for function / method body.
max-locals = 50
# Maximum number of parents for a class (see R0901).
max-parents = 7
# Maximum number of public methods for a class (see R0904).
max-public-methods = 30
# Maximum number of return / yield for function / method body.
max-returns = 12
# Maximum number of statements in function / method body.
max-statements = 100
# Minimum number of public methods for a class (see R0903).
min-public-methods = 2

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = ["builtin.Exception"]

[tool.pylint.format]
# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4
# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string = "    "
# Maximum number of characters on a single line.
max-line-length = 100
# Maximum number of lines in a module.
max-module-lines = 1520

[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style = "old"

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = ["logging"]

[tool.pylint."messages control"]
# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence = [
  "HIGH",
  "CONTROL_FLOW",
  "INFERENCE",
  "INFERENCE_FAILURE",
  "UNDEFINED",
]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where it
# should appear only once). See also the "--disable" option for examples.
enable = ["c-extension-no-member"]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "XXX", "TODO", "ORI-", "AGO-"]

[tool.pylint.parameter_documentation]
# Whether to accept totally missing parameter documentation in the docstring of a
# function that has parameters.
accept-no-param-doc = true

# Whether to accept totally missing raises documentation in the docstring of a
# function that raises an exception.
accept-no-raise-doc = true

# Whether to accept totally missing return documentation in the docstring of a
# function that returns a statement.
accept-no-return-doc = true

# Whether to accept totally missing yields documentation in the docstring of a
# generator.
accept-no-yields-doc = true

# If the docstring type cannot be guessed the specified docstring type will be
# used.
default-docstring-type = "numpy"

[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 5

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each category,
# as well as 'statement' which is the total number of statements analyzed. This
# score is used by the global evaluation report (RP0004).
evaluation = "10.0 - ((float(5 * error + 2 * warning + refactor + convention) / (statement+1)) * 10)"

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
msg-template = "{path}:{line}:{column}: {msg_id}: {msg} ({symbol})"

# Activate the evaluation score.
score = true

[tool.pylint.similarities]
# Comments are removed from the similarity computation
ignore-comments = true

# Docstrings are removed from the similarity computation
ignore-docstrings = true

# Signatures are removed from the similarity computation
ignore-signatures = true

# Minimum lines number of a similarity.
min-similarity-lines = 20

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions = 4

# List of comma separated words that should be considered directives if they
# appear at the beginning of a comment and should not be checked.
spelling-ignore-comment-directives = [
  "fmt: on",
  "fmt: off",
  "noqa:",
  "noqa",
  "nosec",
  "isort:skip",
  "mypy:",
]

[tool.pylint.typecheck]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators = ["contextlib.contextmanager"]

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
# Note: This problem appears to be related to dynamic return types.
generated-members = ["numpy\\.*"]

# Tells whether missing members accessed in mixin class should be ignored. A
# class is considered mixin if its name matches the mixin-class-rgx option.
# Tells whether to warn about missing members when the owner of the attribute is
# inferred to be None.
ignore-none = true

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference can
# return multiple potential results while evaluating a Python object, but some
# branches might not be evaluated, which results in partial inference. In that
# case, it might be useful to still emit no-member and other checks for the rest
# of the inferred objects.
ignore-on-opaque-inference = true

# List of symbolic message names to ignore for Mixin members.
ignored-checks-for-mixins = [
  "no-member",
  "not-async-context-manager",
  "not-context-manager",
  "attribute-defined-outside-init",
]

# Show a hint with possible names when a member name was not found. The aspect of
# finding the hint is based on edit distance.
missing-member-hint = true

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance = 1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices = 1

# Regex pattern to define which classes are considered mixins.
mixin-class-rgx = ".*[Mm]ixin"

# List of decorators that change the signature of a decorated function.
# signature-mutators =

[tool.pylint.typing]
# Set to ``no`` if the app / library does **NOT** need to support runtime
# introspection of type annotations. If you use type annotations **exclusively**
# for type checking of an application, you're probably fine. For libraries,
# evaluate if some users what to access the type hints at runtime first, e.g.,
# through ``typing.get_type_hints``. Applies to Python versions 3.7 - 3.9
runtime-typing = true

[tool.pylint.variables]
# List of additional names supposed to be defined in builtins. Remember that you
# should avoid defining new builtins when possible.
# additional-builtins =

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = true

# List of names allowed to shadow builtins
# allowed-redefined-builtins =

# List of strings which can identify a callback function by name. A callback name
# must start or end with one of those strings.
callbacks = ["cb_", "_cb"]

# A regular expression matching the name of dummy variables (i.e. expected to not
# be used).
# dummy-variables-rgx =

# Argument names that match this expression will be ignored. Default to name with
# leading underscore.
# ignored-argument-names =

# Tells whether we should check for unused import in __init__ files.
# init-import =

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = [
  "six.moves",
  "past.builtins",
  "future.builtins",
  "io",
  "builtins",
]
